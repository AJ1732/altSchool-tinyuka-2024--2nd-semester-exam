/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ErrorImport } from './routes/error'
import { Route as IndexImport } from './routes/index'
import { Route as TodosIndexImport } from './routes/todos/index'
import { Route as TodosIdImport } from './routes/todos/$id'

// Create/Update Routes

const ErrorRoute = ErrorImport.update({
  id: '/error',
  path: '/error',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TodosIndexRoute = TodosIndexImport.update({
  id: '/todos/',
  path: '/todos/',
  getParentRoute: () => rootRoute,
} as any)

const TodosIdRoute = TodosIdImport.update({
  id: '/todos/$id',
  path: '/todos/$id',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/error': {
      id: '/error'
      path: '/error'
      fullPath: '/error'
      preLoaderRoute: typeof ErrorImport
      parentRoute: typeof rootRoute
    }
    '/todos/$id': {
      id: '/todos/$id'
      path: '/todos/$id'
      fullPath: '/todos/$id'
      preLoaderRoute: typeof TodosIdImport
      parentRoute: typeof rootRoute
    }
    '/todos/': {
      id: '/todos/'
      path: '/todos'
      fullPath: '/todos'
      preLoaderRoute: typeof TodosIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/error': typeof ErrorRoute
  '/todos/$id': typeof TodosIdRoute
  '/todos': typeof TodosIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/error': typeof ErrorRoute
  '/todos/$id': typeof TodosIdRoute
  '/todos': typeof TodosIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/error': typeof ErrorRoute
  '/todos/$id': typeof TodosIdRoute
  '/todos/': typeof TodosIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/error' | '/todos/$id' | '/todos'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/error' | '/todos/$id' | '/todos'
  id: '__root__' | '/' | '/error' | '/todos/$id' | '/todos/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ErrorRoute: typeof ErrorRoute
  TodosIdRoute: typeof TodosIdRoute
  TodosIndexRoute: typeof TodosIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ErrorRoute: ErrorRoute,
  TodosIdRoute: TodosIdRoute,
  TodosIndexRoute: TodosIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.jsx",
      "children": [
        "/",
        "/error",
        "/todos/$id",
        "/todos/"
      ]
    },
    "/": {
      "filePath": "index.jsx"
    },
    "/error": {
      "filePath": "error.jsx"
    },
    "/todos/$id": {
      "filePath": "todos/$id.jsx"
    },
    "/todos/": {
      "filePath": "todos/index.jsx"
    }
  }
}
ROUTE_MANIFEST_END */
